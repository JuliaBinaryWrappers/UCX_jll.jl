# Autogenerated wrapper script for UCX_jll for powerpc64le-linux-gnu
export libucm, libucp, libucs, libuct, ucx_info, ucx_perftest, ucx_read_profile

using CompilerSupportLibraries_jll
using NUMA_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `libucm`
const libucm_splitpath = ["lib", "libucm.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libucm_path = ""

# libucm-specific global declaration
# This will be filled out by __init__()
libucm_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libucm = "libucm.so.0"


# Relative path to `libucp`
const libucp_splitpath = ["lib", "libucp.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libucp_path = ""

# libucp-specific global declaration
# This will be filled out by __init__()
libucp_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libucp = "libucp.so.0"


# Relative path to `libucs`
const libucs_splitpath = ["lib", "libucs.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libucs_path = ""

# libucs-specific global declaration
# This will be filled out by __init__()
libucs_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libucs = "libucs.so.0"


# Relative path to `libuct`
const libuct_splitpath = ["lib", "libuct.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libuct_path = ""

# libuct-specific global declaration
# This will be filled out by __init__()
libuct_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libuct = "libuct.so.0"


# Relative path to `ucx_info`
const ucx_info_splitpath = ["bin", "ucx_info"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ucx_info_path = ""

# ucx_info-specific global declaration
function ucx_info(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ucx_info_path)
    end
end


# Relative path to `ucx_perftest`
const ucx_perftest_splitpath = ["bin", "ucx_perftest"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ucx_perftest_path = ""

# ucx_perftest-specific global declaration
function ucx_perftest(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ucx_perftest_path)
    end
end


# Relative path to `ucx_read_profile`
const ucx_read_profile_splitpath = ["bin", "ucx_read_profile"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ucx_read_profile_path = ""

# ucx_read_profile-specific global declaration
function ucx_read_profile(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ':', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ':', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ucx_read_profile_path)
    end
end


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"UCX")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (CompilerSupportLibraries_jll.PATH_list, NUMA_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (CompilerSupportLibraries_jll.LIBPATH_list, NUMA_jll.LIBPATH_list,))

    global libucm_path = normpath(joinpath(artifact_dir, libucm_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libucm_handle = dlopen(libucm_path)
    push!(LIBPATH_list, dirname(libucm_path))

    global libucp_path = normpath(joinpath(artifact_dir, libucp_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libucp_handle = dlopen(libucp_path)
    push!(LIBPATH_list, dirname(libucp_path))

    global libucs_path = normpath(joinpath(artifact_dir, libucs_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libucs_handle = dlopen(libucs_path)
    push!(LIBPATH_list, dirname(libucs_path))

    global libuct_path = normpath(joinpath(artifact_dir, libuct_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libuct_handle = dlopen(libuct_path)
    push!(LIBPATH_list, dirname(libuct_path))

    global ucx_info_path = normpath(joinpath(artifact_dir, ucx_info_splitpath...))

    push!(PATH_list, dirname(ucx_info_path))
    global ucx_perftest_path = normpath(joinpath(artifact_dir, ucx_perftest_splitpath...))

    push!(PATH_list, dirname(ucx_perftest_path))
    global ucx_read_profile_path = normpath(joinpath(artifact_dir, ucx_read_profile_splitpath...))

    push!(PATH_list, dirname(ucx_read_profile_path))
    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(vcat(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ':')

    
end  # __init__()

